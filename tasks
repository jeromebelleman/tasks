#! /usr/bin/env python

'''
Manage tasks in projects, according to priority, using Vim
'''

import sys
reload(sys)
sys.setdefaultencoding('UTF8')

import os
import argparse
import datetime, time
import subprocess
import re
import tempfile
import json
import uuid
from itertools import izip_longest as izipl

# TODO Priority by position?

DATEFMT = '%Y/%m/%d'

REPROPRIO = re.compile(r'''^Project:[ ]+(?P<project>\S+)[ ]+
                            Priority:[ ]*(?P<priority>\S+)?''',
                       re.VERBOSE)
REDATES   = re.compile(r'''^Opened:[ ]+(?P<opened>\d{4}/\d\d/\d\d)[ ]+
                            Closed:[ ]*(?P<closed>\d{4}/\d\d/\d\d)?''',
                       re.VERBOSE)
REUUID    = re.compile(r'^UUID:[ ]+(?P<uuid>([0-9A-Fa-f]+-){4}[0-9A-Fa-f]+)')
RETW      = re.compile(r'(\w+:"[^"]+")')

NOPROJ    = 'noproject'

def commit(directory):
    '''
    Run git commit
    '''

    def gitcommit():
        '''
        Run git commit
        '''

        subprocess.check_call(['git', 'commit', '-qmAutocommit'], cwd=directory)

    def add():
        '''
        Run git add
        '''

        subprocess.check_call(['git', 'add', 'tasks.json'], cwd=directory)

    try:
        add()
    except subprocess.CalledProcessError:
        subprocess.check_call(['git', 'init', '-q'], cwd=directory)
        add()

    # FIXME What's the point in using check_call() if it's to not do anything
    # with the exception?
    try:
        gitcommit()
    except subprocess.CalledProcessError:
        pass

    # FIXME What's the point in using check_call() if it's to not do anything
    # with the exception?
    try:
        gitgc(directory)
    except subprocess.CalledProcessError:
        pass

class EditException(Exception):
    '''
    Edit exception
    '''

    pass

class RecurringException(Exception):
    '''
    Recurring exception
    '''

    pass

def gitgc(directory):
    '''
    Run git gc
    '''

    subprocess.check_call(['git', 'gc'], cwd=directory)

def loadtasks(directory):
    '''
    Load tasks from file
    '''

    try:
        with open(directory + '/tasks.json') as fhl:
            return dict(json.load(fhl))
    except (IOError, ValueError):
        return {}

def dumptasks(directory, tasks):
    '''
    Dump tasks to file
    '''

    with open(directory + '/tasks.json', 'w') as fhl:
        json.dump(sorted(tasks.items()), fhl, indent=4)
    commit(directory)

def parse(fhl):
    '''
    Parse task forms from file
    '''

    def edit(task):
        '''
        Edit task
        '''

        task['description'] = task['description'].strip()
        if task['project'] and task['description'] and \
            'TODO' not in (task['project'], task['description']):
            if uuid4:
                tasks[uuid4] = task
            else:
                tasks[str(uuid.uuid4())] = task
        else:
            raise EditException

    tasks = {}

    infields = True
    for line in fhl:
        if infields:
            if line == '\n' or line[0] == '#':
                continue

            match = REPROPRIO.match(line)
            if match:
                uuid4 = None
                task = {
                        'project':     match.group('project'),
                        'description': '',
                       }
                if match.group('priority'):
                    task['priority'] = match.group('priority')
                continue

            match = REDATES.match(line)
            if match:
                task['opened'] = match.group('opened')
                if match.group('closed'):
                    task['closed'] = match.group('closed')
                continue

            match = REUUID.match(line)
            if match:
                uuid4 = match.group('uuid')
                continue

            if line == 'Description:\n':
                infields = False
        else:
            if line == '--\n':
                edit(task)
                infields = True
            else:
                task['description'] += line

    if not infields:
        edit(task)

    return tasks

def editcb(args, tasks):
    '''
    List and edit tasks
    '''

    def prioritykey(task):
        '''
        Return sorting priority key
        '''

        try:
            priority = tasks[task]['priority']
            try:
                return float(priority)
            except ValueError:
                due = datetime.datetime.strptime(priority, DATEFMT)
                due = datetime.date(due.year, due.month, due.day)
                # Add 1 to priority since day before last deserves top priority
                return topprio - (due - datetime.date.today()).days + 1
        except TypeError: # When topprio is None
            return -time.mktime(due.timetuple())
        except KeyError:
            return None

    def closedkey(task):
        '''
        Return sorting closed date key
        '''

        try:
            return datetime.datetime.strptime(tasks[task]['closed'], DATEFMT)
        except KeyError:
            return datetime.datetime.fromtimestamp(0)

    # Load template
    with open(args.shared + '/template') as fhl:
        template = fhl.read()

    # Find top priority
    topprio = None
    for task in tasks:
        try:
            newprio = int(tasks[task]['priority'])
            topprio = newprio if newprio > topprio else topprio
        except (ValueError, KeyError):
            pass

    # Filter by whatever is specified in args
    if args.project:
        tasks = {task: tasks[task] for task in tasks
                    if tasks[task]['project'].startswith(args.project)}
    if not args.closed:
        tasks = {task: tasks[task] for task in tasks
                    if 'closed' not in tasks[task]}

    # Write tasks to temporary file
    tmp = tempfile.NamedTemporaryFile(dir=args.directory + '/tmp')
    if args.project:
        print >> tmp, '# ' + args.project
    key = closedkey if args.closed else prioritykey
    for task in sorted(tasks, key=key, reverse=True):
        tmp.write(template.format(
            project=tasks[task]['project'],
            priority=tasks[task]['priority']
                if 'priority' in tasks[task] else '',
            opened=tasks[task]['opened'],
            closed=tasks[task]['closed'] if 'closed' in tasks[task] else '',
            uuid=task,
            description=tasks[task]['description'],
        ))
        print >> tmp, '\n--\n'
    tmp.flush()

    while True:
        # Run Vim
        subprocess.call(['vim', '-S', args.shared + '/vimrc', tmp.name])

        # Parse tasks
        try:
            with open(tmp.name) as fhl:
                newtasks = parse(fhl)
                break
        except EditException:
            pass

    # Identify tasks to be removed. To be done before changes are spotted.
    removal = set(tasks) - set(newtasks)

    # Only keep differing tasks
    unchanged = []
    for task in newtasks:
        try:
            for field, newfield in izipl(tasks[task], newtasks[task]):
                if not field and newfield or field and not newfield or \
                    tasks[task][field] != newtasks[task][newfield]:
                    break
            else:
                unchanged.append(task)
        except KeyError:
            # When task not in tasks, i.e. it's a new task
            pass
    for task in unchanged:
        del newtasks[task]

    # Load latest tasks only now, i.e. not before you spot differences lest
    # you overwrite changes made in the meantime.
    # Still need load tasks again in case a new one has been added in the
    # meantime.
    tasks = loadtasks(args.directory)

    # Apply changes
    for task in newtasks:
        tasks[task] = newtasks[task]
    # Remove tasks
    for task in removal:
        try:
            del tasks[task]
        except KeyError:
            pass

    # Write tasks to file
    dumptasks(args.directory, tasks)

def addcb(args, tasks):
    '''
    Add tasks
    '''

    # Load template
    with open(args.shared + '/template') as fhl:
        template = fhl.read()

    # Print new task
    print template.format(
                          project='TODO',
                          priority='',
                          opened=datetime.date.today().strftime(DATEFMT),
                          closed='',
                          uuid='',
                          description='TODO',
                         )

def prioritiescb(args, tasks):
    '''
    Print each distinct numeric priority with a sample description
    '''

    if args.project:
        tasks = {task: tasks[task] for task in tasks
                 if tasks[task]['project'].startswith(args.project)}

    priorities = {}
    for task in [task for task in tasks if 'closed' not in tasks[task]]:
        try:
            if tasks[task]['priority'] not in priorities:
                priorities[float(tasks[task]['priority'])] = \
                    tasks[task]['project'] + ': ' + \
                    tasks[task]['description'].split('\n')[0]
        except (ValueError, KeyError):
            pass

    # Report
    for priority in sorted(priorities, reverse=True):
        print priority, priorities[priority]


def projectscb(_, tasks):
    '''
    List projects
    '''

    for project in sorted(set([tasks[task]['project'] for task in tasks])):
        print project

def sync(args, cmd):
    '''
    Run sync command with git repository
    '''

    repository = os.path.abspath(os.path.expanduser(args.repository))
    subprocess.call(['git', 'remote', 'add', 'remote', repository],
                    cwd=args.directory)
    subprocess.call(['git', cmd, 'remote', 'master'], cwd=args.directory)
    subprocess.call(['git', 'remote', 'remove', 'remote'], cwd=args.directory)
    gitgc(repository)

def pullcb(args, _):
    '''
    Pull from git repository
    '''

    sync(args, 'pull')

def pushcb(args, _):
    '''
    Push to git repository
    '''

    sync(args, 'push')

def importcb(args, tasks):
    '''
    Import tasks from Taskwarrior
    '''

    try:
        fhl = open(args.filepath)
    except IOError, exc:
        print >> sys.stderr, exc
        return 1

    tasks = {}
    for line in fhl:
        fields = RETW.split(line)
        task, tags, annotations = {}, None, []
        try:
            # Parse fields
            for field in fields:
                if field in ('[', ']\n', ' '):
                    continue

                key, value = field.split(':', 1)
                if key == 'description':
                    task['description'] = value[1:-1]
                elif key == 'entry':
                    opened = datetime.date.fromtimestamp(float(value[1:-1]))
                    task['opened'] = opened.strftime(DATEFMT)
                elif key == 'end':
                    closed = datetime.date.fromtimestamp(float(value[1:-1]))
                    task['closed'] = closed.strftime(DATEFMT)
                elif key == 'priority' and 'priority' not in task:
                    # Set numeric priority only if no due time
                    priority = value[1:-1]
                    if priority == 'L':
                        task['priority'] = '1'
                    elif priority == 'M':
                        task['priority'] = '2'
                    elif priority == 'H':
                        task['priority'] = '3'
                elif key == 'project':
                    task['project'] = value[1:-1]
                elif key == 'due':
                    priority = datetime.date.fromtimestamp(float(value[1:-1]))
                    task['priority'] = priority.strftime(DATEFMT)
                elif key.startswith('annotation_'):
                    annotations.append(value[1:-1])
                elif key == 'uuid':
                    uuid4 = value[1:-1]
                elif key == 'tags':
                    tags = value[1:-1]
                elif key == 'recur':
                    raise RecurringException
                elif key in ('imask', 'mask', 'parent', 'status',
                             'priority', 'wait', 'start', 'depends',
                             'until'):
                    pass
                else:
                    print >> sys.stderr, "Unexpected field: " + key
                    return 1

            # Build task
            if 'project' not in task:
                task['project'] = NOPROJ

            if tags == 'work':
                task['project'] = 'cern.' + task['project']
            elif not tags:
                task['project'] = 'home.' + task['project']
            else:
                print >> sys.stderr, "Unexpected tags: " + tags
                return 1
            
            task['description'] = \
                '\n\n'.join([task['description']] + annotations)

            # Add task
            tasks[uuid4] = task
        except RecurringException:
            pass

    print json.dumps(sorted(tasks.items()), indent=4)
    fhl.close()

def main():
    '''
    Main function
    '''

    # Arguments
    parser = argparse.ArgumentParser(description="Manage tasks")
    parser.add_argument('-d', '--directory', help="task directory",
                        default='~/.tasks', type=os.path.expanduser)
    parser.add_argument('-s', '--shared', help="shared directory",
                        default='/usr/share/tasks')
    subparser = parser.add_subparsers()

    addparser = subparser.add_parser('add', help="add tasks (for Vim)")
    addparser.set_defaults(func=addcb)

    editparser = subparser.add_parser('edit', help="list tasks")
    editparser.add_argument('-p', '--project')
    editparser.add_argument('-c', '--closed',
                            help="display and sort by closed tasks",
                            action='store_true')
    editparser.set_defaults(func=editcb)

    projectsparser = subparser.add_parser('projects',
                                          help="list projects (for completion)")
    projectsparser.set_defaults(func=projectscb)

    priosparser = subparser.add_parser('priorities',
                                       help="list priorities (for completion)")
    priosparser.add_argument('-p', '--project')
    priosparser.set_defaults(func=prioritiescb)

    pullparser = subparser.add_parser('pull',
                                        help="pull from other repository")
    pullparser.add_argument('repository', help="tasks directory",
                              type=os.path.expanduser)
    pullparser.set_defaults(func=pullcb)

    pushparser = subparser.add_parser('push', help="push to other repository")
    pushparser.add_argument('repository', help="tasks directory",
                            type=os.path.expanduser)
    pushparser.set_defaults(func=pushcb)

    importparser = subparser.add_parser('import',
                                        help="import from Taskwarrior")
    importparser.add_argument(metavar='file', dest='filepath',
                              type=os.path.expanduser, help="file path")
    importparser.set_defaults(func=importcb)

    args = parser.parse_args()

    # Make directories
    for dirname in args.directory, args.directory + '/tmp':
        try:
            os.mkdir(dirname)
        except OSError:
            pass

    # Load tasks
    tasks = loadtasks(args.directory)

    # Run
    args.func(args, tasks)

if __name__ == '__main__':
    sys.exit(main())
